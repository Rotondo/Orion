#!/usr/bin/env python3
"""
Script de Demonstra√ß√£o do Projeto √ìrion
Mostra as funcionalidades principais do sistema em a√ß√£o
"""

import json
import sys
import os
from datetime import datetime

# Adiciona o diret√≥rio pai ao path
sys.path.append(os.path.dirname(__file__))

from services.recommendation_service import OrionOrchestrator
from core.sample_data import create_sample_data

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üöÄ {title}")
    print("="*60)

def print_section(title):
    """Imprime se√ß√£o formatada"""
    print(f"\nüìã {title}")
    print("-"*40)

def print_json(data, max_items=3):
    """Imprime JSON formatado com limite de items"""
    if isinstance(data, list) and len(data) > max_items:
        print(f"Showing top {max_items} of {len(data)} items:")
        data = data[:max_items]
    print(json.dumps(data, indent=2, ensure_ascii=False, default=str))

def run_orion_demo():
    """Executa demonstra√ß√£o completa do Sistema √ìrion"""

    print_header("PROJETO √ìRION - DEMONSTRA√á√ÉO COMPLETA")
    print("Sistema Inteligente de Orquestra√ß√£o de E-commerce")
    print("Autor: Manus AI | Data: 25 de Agosto de 2025")

    # 1. Inicializa o sistema
    print_section("1. Inicializando Sistema √ìrion")
    orchestrator = OrionOrchestrator()
    print("‚úÖ Orquestrador principal inicializado")
    print("‚úÖ Servi√ßos de DNA, Scoring e Recomenda√ß√µes ativos")
    print("‚úÖ Rede de Agentes Aut√¥nomos configurada")

    # 2. Popula dados de exemplo
    print_section("2. Carregando Dados de Exemplo")
    sample_result = create_sample_data(orchestrator)
    print(f"‚úÖ {len(sample_result['stores_created'])} lojas de exemplo criadas")
    print(f"‚úÖ {len(sample_result['partners_created'])} parceiros adicionados ao ecossistema")

    print("\nüìä Lojas criadas:")
    for store_id in sample_result['stores_created']:
        store = orchestrator.dna_service.get_store_dna(store_id)
        print(f"  ‚Ä¢ {store.name} ({store.segment.value}, {store.size.value}) - R$ {store.monthly_revenue:,.2f}/m√™s")

    print("\nü§ù Parceiros adicionados:")
    for partner_id in sample_result['partners_created']:
        partner = orchestrator.recommendation_service.partners_db.get(partner_id)
        print(f"  ‚Ä¢ {partner.name} ({partner.category.value}) - ROI: {partner.roi_potential}/10")

    # 3. An√°lise de loja espec√≠fica
    print_section("3. An√°lise Completa - Loja Fashion")
    store_id = "loja_fashion_001"

    # DNA da loja
    store_dna = orchestrator.dna_service.get_store_dna(store_id)
    print(f"\nüß¨ DNA da Loja: {store_dna.name}")
    print(f"  Segmento: {store_dna.segment.value}")
    print(f"  Tamanho: {store_dna.size.value}")
    print(f"  Faturamento mensal: R$ {store_dna.monthly_revenue:,.2f}")
    print(f"  Taxa de convers√£o: {store_dna.conversion_rate:.1%}")
    print(f"  Pain Points: {', '.join(store_dna.pain_points)}")

    # An√°lise de maturidade
    maturity = orchestrator.dna_service.analyze_store_maturity(store_id)
    print(f"\nüìà An√°lise de Maturidade:")
    sorted_maturity = sorted(maturity.items(), key=lambda x: x[1])
    for stage, score in sorted_maturity[:5]:  # Top 5 menores scores
        stage_name = stage.replace('_', ' ').title()
        print(f"  {stage_name}: {score}/10 {'‚ö†Ô∏è' if score < 5 else '‚úÖ'}")

    # Gaps identificados
    gaps = orchestrator.dna_service.identify_gaps(store_id)
    print(f"\nüéØ Gaps Identificados ({len(gaps)} encontrados):")
    for gap in gaps[:3]:
        print(f"  ‚Ä¢ {gap['stage'].replace('_', ' ').title()}: {gap['gap_severity']} prioridade")

    # 4. Recomenda√ß√µes personalizadas
    print_section("4. Recomenda√ß√µes Personalizadas")
    recommendations = orchestrator.recommendation_service.get_recommendations_for_store(store_id, limit=5)

    print(f"\nüéØ Top 5 Recomenda√ß√µes para {store_dna.name}:")
    for i, rec in enumerate(recommendations, 1):
        partner = orchestrator.recommendation_service.partners_db.get(rec.partner_id)
        priority_emoji = "üî¥" if rec.priority == 1 else "üü°" if rec.priority == 2 else "üü¢"

        print(f"\n  {i}. {priority_emoji} {partner.name}")
        print(f"     Score Final: {rec.final_score:.2f}/1.00")
        print(f"     Compatibilidade: {rec.compatibility_score:.2f}")
        print(f"     Rentabilidade: {rec.profitability_score:.2f}")
        print(f"     ROI Estimado: {rec.estimated_roi:.0f}%")
        print(f"     Timeline: {rec.implementation_timeline}")
        if rec.reasoning:
            print(f"     Motivos: {', '.join(rec.reasoning)}")

    # 5. An√°lise por √°rea priorit√°ria
    print_section("5. Recomenda√ß√µes por √Årea Priorit√°ria")
    priority_recs = orchestrator.recommendation_service.get_priority_recommendations(store_id)

    for area, recs in priority_recs.items():
        if recs:
            area_name = area.replace('_', ' ').title()
            print(f"\nüéØ {area_name}:")
            for rec in recs[:2]:  # Top 2 por √°rea
                partner = orchestrator.recommendation_service.partners_db.get(rec.partner_id)
                print(f"  ‚Ä¢ {partner.name} (Score: {rec.final_score:.2f})")

    # 6. An√°lise de Agentes Aut√¥nomos
    print_section("6. Rede de Agentes Aut√¥nomos em A√ß√£o")

    # Registra agente mestre para a loja
    master_agent = orchestrator.agent_orchestrator.register_master_agent(store_id)
    print(f"‚úÖ Agente Mestre registrado: {master_agent.agent_id}")

    # Executa an√°lise do agente mestre
    all_stores = list(orchestrator.dna_service.stores_db.values())
    all_partners = list(orchestrator.recommendation_service.partners_db.values())
    context = {
        "store_id": store_id,
        "stores": all_stores,
        "partners": all_partners
    }

    master_result = master_agent.execute_action(context)
    print(f"\nü§ñ An√°lise do Agente Mestre:")
    print(f"  Insights gerados: {len(master_result.get('insights', []))}")
    for insight in master_result.get('insights', [])[:3]:
        print(f"  ‚Ä¢ {insight}")

    # Agente de Intelig√™ncia de Mercado
    market_agent = orchestrator.agent_orchestrator.market_agent
    market_analysis = market_agent.execute_action(context)

    print(f"\nüìä Intelig√™ncia de Mercado:")
    market_overview = market_analysis['market_overview']
    print(f"  Total de lojas: {market_overview['total_stores']}")
    print(f"  Total de parceiros: {market_overview['total_partners']}")

    segment_dist = market_analysis['segment_distribution']
    print(f"  Distribui√ß√£o por segmento:")
    for segment, count in segment_dist.items():
        print(f"    {segment.replace('_', ' ').title()}: {count} lojas")

    # 7. Dashboard do Ecossistema
    print_section("7. Dashboard do Ecossistema √ìrion")
    dashboard = orchestrator.get_ecosystem_dashboard()

    overview = dashboard['ecosystem_overview']
    print(f"\nüåü Vis√£o Geral do Ecossistema:")
    print(f"  Total de Lojas: {overview['total_stores']}")
    print(f"  Total de Parceiros: {overview['total_partners']}")
    print(f"  Receita Total Mensal: R$ {overview['total_monthly_revenue']:,.2f}")
    print(f"  Taxa de Convers√£o M√©dia: {overview['average_conversion_rate']:.2%}")

    health = dashboard['health_metrics']
    print(f"\nüíö M√©tricas de Sa√∫de:")
    print(f"  Lojas com Recomenda√ß√µes: {health['stores_with_recommendations']}")
    print(f"  Agentes Ativos: {health['active_agents']}")
    print(f"  Maturidade do Ecossistema: {health['ecosystem_maturity']}")

    # 8. Simula√ß√£o de onboarding
    print_section("8. Simula√ß√£o - Onboarding Nova Loja")

    new_store_data = {
        "store_id": "nova_loja_demo",
        "name": "Demo Store - Suplementos",
        "segment": "saude_beleza",
        "size": "pequena", 
        "monthly_revenue": 8000,
        "monthly_orders": 60,
        "avg_ticket": 133.33,
        "conversion_rate": 0.015,
        "pain_points": ["conversao_baixa", "seo", "mobile"],
        "priorities": {
            "1_atracao": 9,
            "3_navegacao": 8,
            "5_carrinho": 9
        }
    }

    onboard_result = orchestrator.onboard_store(new_store_data)
    print(f"‚úÖ Nova loja onboarded: {onboard_result['store_id']}")
    print(f"ü§ñ Agente Mestre criado: {onboard_result['master_agent_id']}")
    print(f"üìä Gaps identificados: {len(onboard_result['identified_gaps'])}")
    print(f"üéØ Recomenda√ß√µes iniciais: {len(onboard_result['initial_recommendations'])}")

    if onboard_result['initial_recommendations']:
        print("\nüéØ Primeiras recomenda√ß√µes:")
        for rec in onboard_result['initial_recommendations'][:3]:
            partner = orchestrator.recommendation_service.partners_db.get(rec['partner_id'])
            print(f"  ‚Ä¢ {partner.name} (Score: {rec['score']:.2f}, Prioridade: {rec['priority']})")

    # 9. An√°lise de impacto de novo parceiro
    print_section("9. Simula√ß√£o - Novo Parceiro no Ecossistema")

    new_partner_data = {
        "partner_id": "demo_partner_ai",
        "name": "AI PersonalizaMax",
        "category": "3_navegacao",
        "subcategory": "Personaliza√ß√£o com IA",
        "description": "Personaliza√ß√£o avan√ßada com intelig√™ncia artificial",
        "pricing_model": "fixed",
        "min_price": 399,
        "max_price": 1499,
        "target_segments": ["fashion", "casa_jardim", "saude_beleza"],
        "target_sizes": ["pequena", "media"],
        "integration_complexity": 4,
        "roi_potential": 9,
        "commission_rate": 0.25
    }

    partner_result = orchestrator.add_partner_to_ecosystem(new_partner_data)
    print(f"‚úÖ Novo parceiro adicionado: {partner_result['partner_id']}")
    print(f"üìä Impacto no mercado: {partner_result['market_impact']['market_opportunity']}")
    print(f"üéØ Matches potenciais: {partner_result['market_impact']['potential_matches']} lojas")
    print(f"üìà Percentual de match: {partner_result['market_impact']['match_percentage']:.1f}%")

    # 10. Resultados finais
    print_section("10. Resumo da Demonstra√ß√£o")

    final_dashboard = orchestrator.get_ecosystem_dashboard()
    final_overview = final_dashboard['ecosystem_overview']

    print("\nüéâ Sistema √ìrion Demonstrado com Sucesso!")
    print(f"\nüìä Estado Final do Ecossistema:")
    print(f"  ‚Ä¢ {final_overview['total_stores']} lojas gerenciadas")
    print(f"  ‚Ä¢ {final_overview['total_partners']} parceiros no cat√°logo")
    print(f"  ‚Ä¢ R$ {final_overview['total_monthly_revenue']:,.2f} em faturamento mensal total")
    print(f"  ‚Ä¢ {final_dashboard['health_metrics']['active_agents']} agentes ativos")

    print(f"\nüöÄ Capacidades Demonstradas:")
    print("  ‚úÖ Cria√ß√£o e an√°lise de DNA das lojas")
    print("  ‚úÖ Sistema de scoring inteligente (compatibilidade + rentabilidade)")
    print("  ‚úÖ Rede de agentes aut√¥nomos funcionando")
    print("  ‚úÖ Recomenda√ß√µes personalizadas e priorizadas")
    print("  ‚úÖ An√°lise de gaps e maturidade")
    print("  ‚úÖ Onboarding automatizado de lojas")
    print("  ‚úÖ Gest√£o de parceiros e impacto de mercado")
    print("  ‚úÖ Dashboard completo do ecossistema")
    print("  ‚úÖ Intelig√™ncia de mercado e oportunidades")

    print(f"\nüéØ Pr√≥ximos Passos Recomendados:")
    print("  1. Implementar frontend web para visualiza√ß√£o")
    print("  2. Adicionar machine learning aos algoritmos de scoring")
    print("  3. Integrar com APIs reais de parceiros")
    print("  4. Implementar sistema de notifica√ß√µes e alertas")
    print("  5. Adicionar m√©tricas avan√ßadas e analytics")

    print("\n" + "="*60)
    print("üåü DEMONSTRA√á√ÉO CONCLU√çDA - PROJETO √ìRION FUNCIONAL!")
    print("="*60)

if __name__ == "__main__":
    run_orion_demo()
